import asyncio
import signal
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
import telegram
from mcrcon import MCRcon
import warnings
from telegram.warnings import PTBUserWarning
import json
import os
from datetime import datetime, timedelta
from config import TOKEN, RCON_HOST, RCON_PORT, RCON_PASSWORD, ADMIN_IDS, ADMIN_NAMES
from typing import Dict, List, Tuple, Optional

# –ü–æ–¥–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
warnings.filterwarnings('ignore', category=PTBUserWarning)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
RULES, AGE, NICKNAME, OTHER_INFO = range(4)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
DATA_DIR = 'data'
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

APPLICATIONS_FILE = os.path.join(DATA_DIR, 'applications.json')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = None

def load_applications() -> Dict:
    try:
        if os.path.exists(APPLICATIONS_FILE):
            with open(APPLICATIONS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ applications.json: {e}")
    return {}

def save_applications(applications: Dict) -> None:
    try:
        with open(APPLICATIONS_FILE, 'w', encoding='utf-8') as f:
            json.dump(applications, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ applications.json: {e}")

def can_submit_application(user_id):
    if user_id in ADMIN_IDS:
        return True, None
    
    applications = load_applications()
    user_apps = applications.get(str(user_id), [])
    
    if not user_apps:
        return True, None
    
    last_app = user_apps[-1]
    last_date = datetime.fromisoformat(last_app['date'])
    
    if last_app['status'] == 'approved':
        return False, "–í–∞—à–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."
    
    if last_app['status'] == 'rejected':
        if datetime.now() - last_date < timedelta(days=7):
            days_left = 7 - (datetime.now() - last_date).days
            return False, f"–í–∞—à–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π."
    
    return True, None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    
    can_submit, message = can_submit_application(user_id)
    if not can_submit:
        await update.message.reply_text(message)
        return ConversationHandler.END

    welcome_message = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä! –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—á–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞:\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç\n\n"
        "–ù–µ –≥—Ä–∏—Ñ–µ—Ä–∏—Ç—å (–ü–æ–¥ –ø—Ä–∏—Ñ–µ—Ä—Å—Ç–≤–æ–º –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º —á—É–∂–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, "
        "–∑–∞–ª–∏–≤–∞–Ω–∏–µ –ª–∞–≤–æ–π, –≤–æ–¥–æ–π –∏ —Ç.–ø; —É–±–∏–π—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã; —É–±–∏–π—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏/–∏–ª–∏ –º–æ–±–æ–≤ –Ω–∞ —Ñ–µ—Ä–º–∞—Ö –∏–≥—Ä–æ–∫–æ–≤)\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚îà‚îà‚îÑ‚îÑ‚ïå‚ïå‚ïå‚ïå‚îÑ‚îÑ‚îà‚îà‚îà‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "–ù–µ –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚îà‚îà‚îÑ‚îÑ‚ïå‚ïå‚ïå‚ïå‚îÑ‚îÑ‚îà‚îà‚îà‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "–ó–∞–ø—Ä–µ—â–µ–Ω—ã –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã (–æ–±—Å—É–∂–¥–µ–Ω–∏—è, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏–∫–∏, –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–º–≤–æ–ª–∏–∫–∏)\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚îà‚îà‚îÑ‚îÑ‚ïå‚ïå‚ïå‚ïå‚îÑ‚îÑ‚îà‚îà‚îà‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "–ó–∞–ø—Ä–µ—â–µ–Ω—ã —á–∏—Ç—ã (–ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚îà‚îà‚îÑ‚îÑ‚ïå‚ïå‚ïå‚ïå‚îÑ‚îÑ‚îà‚îà‚îà‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "–ù–µ –≤–æ—Ä–æ–≤–∞—Ç—å —á—É–∂–∏–µ –≤–µ—â–∏/–∂–∏–≤–æ—Ç–Ω—ã—Ö\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚îà‚îà‚îÑ‚îÑ‚ïå‚ïå‚ïå‚ïå‚îÑ‚îÑ‚îà‚îà‚îà‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "–ù–µ —Å—Ç—Ä–æ–∏—Ç—å –æ–≥—Ä–æ–º–Ω—ã–µ —Ñ–µ—Ä–º—ã –∏ –º–µ—Ö–∞–Ω–∏–∑–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –Ω–∞–≥—Ä—É–∂–∞—é—Ç —Å–µ—Ä–≤–µ—Ä –∏ —Å–Ω–∏–∂–∞—é—Ç tps\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚îà‚îà‚îÑ‚îÑ‚ïå‚ïå‚ïå‚ïå‚îÑ‚îÑ‚îà‚îà‚îà‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "–ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ–≥–æ—Ä–æ–¥–∏–ª –°–í–û–Æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –∏/–∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â—É—é —Ç–∞–±–ª–∏—á–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–ø–∏—Å–∞–Ω–æ "
        "\"–≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â—ë–Ω\", \"–≤—Ö–æ–¥ —Ç–æ–ª—å–∫–æ ... \", —Ç–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–∏ —É—Å–ª–æ–≤–∏—è. "
        "(—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤)\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚îà‚îà‚îÑ‚îÑ‚ïå‚ïå‚ïå‚ïå‚îÑ‚îÑ‚îà‚îà‚îà‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É –ø–æ –ø—Ä–∏—á–∏–Ω–µ –æ—Å–∫–æ—Ä–±–ª—è—é—â–µ–≥–æ –Ω–∏–∫–∞ –ª–∏–±–æ –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚îà‚îà‚îÑ‚îÑ‚ïå‚ïå‚ïå‚ïå‚îÑ‚îÑ‚îà‚îà‚îà‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "–ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–≥—Ä–æ–∫–∞ –±–æ–ª–µ–µ —á–µ–º 3 –º–µ—Å—è—Ü–∞ –ø–æ –Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ, –µ–≥–æ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –ø—Ä–∏–≤–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã "
        "(—Å–Ω–µ—Å–µ–Ω—ã/–ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω—ã/–¥–æ—Å—Ç—Ä–æ–µ–Ω—ã –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.)\n\n"
        "–í—ã –∏–∑—É—á–∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞?"
    )

    keyboard = [
        [
            InlineKeyboardButton("–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="rules:yes"),
            InlineKeyboardButton("–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="rules:no")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    return RULES

async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['age'] = update.message.text
    await update.message.reply_text('–í–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫')
    return NICKNAME

async def nickname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['nickname'] = update.message.text
    user_data = context.user_data
    user = update.effective_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data['user_id'] = user.id
    display_name = user.username if user.username else user.first_name
    user_data['display_name'] = display_name
    nickname_text = user_data["nickname"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã —Å —Ç–µ–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tag = f"@{user.username}" if user.username else f"id: {user.id}"
    survey_result = (
        f"–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç {user_tag}\n\n"
        f"–ò–∑—É—á–∏–ª –ø—Ä–∞–≤–∏–ª–∞: {user_data['rules_acknowledged']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
        f"–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫: {nickname_text}"
    )

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{user.id}:{nickname_text}:{display_name}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user.id}:{nickname_text}:{display_name}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id, 
                text=survey_result,
                reply_markup=reply_markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    await update.message.reply_text(
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã! üëç\n\n'
        '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. '
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.'
    )
    return ConversationHandler.END

async def other_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['rules_acknowledged'] = "–î–∞"
    await update.message.reply_text('–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?')
    return AGE

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        query = update.callback_query
        await query.answer()

        data = query.data.split(':')
        action = data[0]
        admin_name = ADMIN_NAMES.get(query.from_user.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")

        if action == "rules":
            response = data[1]
            if response == "yes":
                context.user_data['rules_acknowledged'] = "–î–∞"
                await query.edit_message_text(text="–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
                return AGE
            else:
                await query.edit_message_text(
                    text="–í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. "
                         "–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞."
                )
                return ConversationHandler.END

        if action in ["approve", "reject"]:
            user_id = int(data[1])
            nickname = data[2]
            display_name = data[3] if len(data) > 3 else nickname
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                chat = await context.bot.get_chat(user_id)
                user_tag = f"@{chat.username}" if chat.username else f"id: {user_id}"
            except:
                user_tag = f"id: {user_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
            applications = load_applications()
            if str(user_id) not in applications:
                applications[str(user_id)] = []
            
            user_apps = applications.get(str(user_id), [])
            if user_apps and user_apps[-1].get('nickname') == nickname and user_apps[-1].get('status') in ['approved', 'rejected']:
                await query.edit_message_text(
                    text=f"–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ {'–æ–¥–æ–±—Ä–µ–Ω–∞' if user_apps[-1]['status'] == 'approved' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_apps[-1]['admin']}."
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            applications[str(user_id)].append({
                'date': datetime.now().isoformat(),
                'status': 'approved' if action == 'approve' else 'rejected',
                'nickname': nickname,
                'admin': admin_name,
                'display_name': display_name
            })
            save_applications(applications)

            if action == "approve":
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ whitelist —á–µ—Ä–µ–∑ RCON
                rcon_success = False
                try:
                    with MCRcon(RCON_HOST, RCON_PASSWORD, RCON_PORT) as mcr:
                        response = mcr.command(f"comfywhitelist add {nickname}")
                        print(f"RCON –æ—Ç–≤–µ—Ç: {response}")
                        rcon_success = True
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ RCON –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                    await query.edit_message_text(
                        text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ {user_tag} –≤ whitelist: {str(e)}"
                    )
                
                if rcon_success:
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=(
                                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –∏ –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞–π—Ç–ª–∏—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞.\n\n"
                                "IP –∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º —Ç–≥ –∫–∞–Ω–∞–ª–µ: https://t.me/unikMC\n\n"
                                "–õ–∏–±–æ –Ω–∞ –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä–µ https://discord.com/invite/XBWNN58qJb\n\n"
                                "–•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã –∏ –Ω–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞!"
                            )
                        )
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        await query.edit_message_text(
                            text=f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞ {user_tag} –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ whitelist."
                        )
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                        for admin_id in ADMIN_IDS:
                            if admin_id != query.from_user.id:
                                try:
                                    await context.bot.send_message(
                                        chat_id=admin_id,
                                        text=f"{admin_name} ‚úÖ –æ–¥–æ–±—Ä–∏–ª –∞–Ω–∫–µ—Ç—É –∏–≥—Ä–æ–∫–∞ {user_tag}"
                                    )
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                                    
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            elif action == "reject":
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π."
                    )
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    await query.edit_message_text(
                        text=f"‚ùå –ê–Ω–∫–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞ {user_tag} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    for admin_id in ADMIN_IDS:
                        if admin_id != query.from_user.id:
                            try:
                                await context.bot.send_message(
                                    chat_id=admin_id,
                                    text=f"{admin_name} ‚ùå –æ—Ç–∫–ª–æ–Ω–∏–ª –∞–Ω–∫–µ—Ç—É –∏–≥—Ä–æ–∫–∞ {user_tag}"
                                )
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                                
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        try:
            await query.edit_message_text(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except:
            pass

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    return ConversationHandler.END

async def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    application = (
        ApplicationBuilder()
        .token(TOKEN)
        .connect_timeout(30.0)
        .read_timeout(30.0)
        .write_timeout(30.0)
        .pool_timeout(30.0)
        .get_updates_read_timeout(30.0)
        .build()
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            RULES: [CallbackQueryHandler(button, pattern='^rules:')],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, nickname)],
            OTHER_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, other_info)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_chat=True,
        per_message=False,
        per_user=True
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button, pattern='^(approve|reject):'))
    
    print('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...')
    return application

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        app = asyncio.run(main())
        app.run_polling(drop_pending_updates=True)
    except KeyboardInterrupt:
        print('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...')
        if app:
            app.stop()
    except Exception as e:
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    finally:
        print('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')

if __name__ == '__main__':
    run_bot()